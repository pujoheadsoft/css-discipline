!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=48)}([function(t,e,n){"use strict";var r=n(5),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=f;var o=n(4);o.inherits=n(2);var s=n(17),a=n(10);o.inherits(f,s);for(var u=i(a.prototype),l=0;l<u.length;l++){var h=u[l];f.prototype[h]||(f.prototype[h]=a.prototype[h])}function f(t){if(!(this instanceof f))return new f(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",c)}function c(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,l=[],h=!1,f=-1;function c(){h&&u&&(h=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!h){var t=a(c);h=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||h||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(8).Buffer)},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(3))},function(t,e,n){var r=n(8),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";var r=n(6).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=h,this.end=f,e=3;break;default:return this.write=c,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function h(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function c(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=s(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";(function(t){var r=n(41),i=n(40),o=n(18);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=c(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):c(t,e);if("Buffer"===e.type&&o(e.data))return c(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function c(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Y(t).length;default:if(r)return q(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<a;o++)if(l(t,o)===l(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,c=0;c<u;c++)if(l(t,o+c)!==l(e,c)){f=!1;break}if(f)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return F(q(e,t.length-n),t,n,r)}function w(t,e,n,r){return F(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function _(t,e,n,r){return w(t,e,n,r)}function S(t,e,n,r){return F(Y(e),t,n,r)}function x(t,e,n,r){return F(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,l=t[i],h=null,f=l>239?4:l>223?3:l>191?2:1;if(i+f<=n)switch(f){case 1:l<128&&(h=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=T)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=T));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return k(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,s=n-e,a=Math.min(o,s),l=this.slice(r,i),h=t.slice(e,n),f=0;f<a;++f)if(l[f]!==h[f]){o=l[f],s=h[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function k(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function C(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=N(t[o]);return i}function M(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function j(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function P(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function O(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function B(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(t,e,n,r,o){return o||B(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function U(t,e,n,r,o){return o||B(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||j(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||j(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||j(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||j(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||j(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||j(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||j(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||j(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||j(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||j(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||j(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||j(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||j(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||j(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return D(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return D(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return U(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return U(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:q(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var I=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function q(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function Y(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(I,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function F(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(1))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){r.call(this),this.array=t}};var r=function(){this.size=(()=>this.array.length),this.forEach=(t=>this.array.forEach(t)),this.map=(t=>this.array.map(t)),this.find=(t=>this.array.find(t)),this.first=(()=>this.array[0]),this.rest=(()=>this.array.slice(1)),this.partition=(t=>this._partition(this.array,0,t)),this.concat=(t=>(this.array=this.array.concat(t),this)),this._partition=((t,e,n)=>e+n>t.length?[]:[t.slice(e,e+n)].concat(this._partition(t,e+1,n)))}},function(t,e,n){"use strict";(function(e,r,i){var o=n(5);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=m;var l=n(4);l.inherits=n(2);var h={deprecate:n(32)},f=n(16),c=n(6).Buffer,d=i.Uint8Array||function(){};var p,g=n(15);function y(){}function m(t,e){a=a||n(0),t=t||{};var r=e instanceof a;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,l=t.writableHighWaterMark,h=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:h,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(E,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),E(t,e))}(t,n,r,e,i);else{var s=S(n);s||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?u(w,t,n,s,i):w(t,n,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function v(t){if(a=a||n(0),!(p.call(v,this)||this instanceof a))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function b(t,e,n,r,i,o,s){e.writelen=r,e.writecb=s,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),E(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,b(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,h=n.encoding,f=n.callback;if(b(t,e,!1,e.objectMode?1:l.length,l,h,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function S(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function x(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),E(t,e)})}function E(t,e){var n=S(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(x,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}l.inherits(v,f),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:h.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):p=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r,i=this._writableState,s=!1,a=!i.objectMode&&(r=t,c.isBuffer(r)||r instanceof d);return a&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=y),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var i=!0,s=!1;return null===n?s=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(r,s),i=!1),i}(this,i,t,n))&&(i.pendingcb++,s=function(t,e,n,r,i,o){if(!n){var s=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,n));return e}(e,r,i);r!==s&&(n=!0,i="buffer",r=s)}var a=e.objectMode?1:r.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,a,r,i,o);return u}(this,i,a,t,e,n)),s},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,E(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(3),n(34).setImmediate,n(1))},function(t,e,n){(e=t.exports=n(17)).Stream=e,e.Readable=e,e.Writable=n(10),e.Duplex=n(0),e.Transform=n(14),e.PassThrough=n(31)},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,s,a,u,l;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var h=new Error('Uncaught, unspecified "error" event. ('+e+")");throw h.context=e,h}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),s=(l=n.slice()).length,u=0;u<s;u++)l[u].apply(this,a);return!0},n.prototype.addListener=function(t,e){var s;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(s=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[t].length>s&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,s,a;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(s=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(a=s;a-- >0;)if(n[a]===e||n[a].listener&&n[a].listener===e){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Points=e.Point=void 0;var r,i=n(9),o=(r=i)&&r.__esModule?r:{default:r};e.Point=class{constructor(t,e){this.x=t,this.y=e}};e.Points=class extends o.default{constructor(t){super(t),this.getMinYPoint=(()=>{const t=this.getMinY();return this.find(e=>e.y==t)}),this.getMinY=(()=>Math.min(...this.getYs())),this.getYs=(()=>this.map(t=>t.y))}}},function(t,e,n){"use strict";t.exports=o;var r=n(0),i=n(4);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){a(t,e,n)}):a(this,null,null)}function a(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(2),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){"use strict";var r=n(5);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){t.exports=n(12).EventEmitter},function(t,e,n){"use strict";(function(e,r){var i=n(5);t.exports=b;var o,s=n(18);b.ReadableState=v;n(12).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=n(16),l=n(6).Buffer,h=e.Uint8Array||function(){};var f=n(4);f.inherits=n(2);var c=n(37),d=void 0;d=c&&c.debuglog?c.debuglog("stream"):function(){};var p,g=n(36),y=n(15);f.inherits(b,u);var m=["error","close","destroy","pause","resume"];function v(t,e){o=o||n(0),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(7).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function b(t){if(o=o||n(0),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function w(t,e,n,r,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,E(t)}(t,s)):(i||(o=function(t,e){var n;r=e,l.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===l.prototype||(e=function(t){return l.from(t)}(e)),r?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!n?(e=s.decoder.write(e),s.objectMode||0!==e.length?_(t,s,e,!1):T(t,s)):_(t,s,e,!1))):r||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&E(t)),T(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=y.destroy,b.prototype._undestroy=y.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=l.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return p||(p=n(7).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var S=8388608;function x(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=S?t=S:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function E(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(R,t):R(t))}function R(t){d("emit readable"),t.emit("readable"),M(t)}function T(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(A,t,e))}function A(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function k(t){d("readable nexttick read 0"),t.read(0)}function C(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),M(t),e.flowing&&!e.reading&&t.read(0)}function M(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function j(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=l.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,s),0===(t-=s)){s===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function L(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(P,e,t))}function P(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function O(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}b.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?L(this):E(this),null;if(0===(t=x(t,e))&&e.ended)return 0===e.length&&L(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=x(n,e))),null===(r=t>0?j(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&L(this)),null!==r&&this.emit("data",r),r},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?h:b;function l(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",f),t.removeListener("error",y),t.removeListener("unpipe",l),n.removeListener("end",h),n.removeListener("end",b),n.removeListener("data",g),c=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function h(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",l);var f=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,M(t))}}(n);t.on("drain",f);var c=!1;var p=!1;function g(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==O(o.pipes,t))&&!c&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function y(e){d("onerror",e),b(),t.removeListener("error",y),0===a(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){d("onfinish"),t.removeListener("close",m),b()}function b(){d("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",y),t.once("close",m),t.once("finish",v),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var s=O(e.pipes,t);return-1===s?this:(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},b.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&E(this):i.nextTick(k,this))}return n},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(C,t,e))}(this,t)),this},b.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},b._fromList=j}).call(this,n(1),n(3))},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ColorStops=e.ColorStop=void 0;var r,i=n(9),o=(r=i)&&r.__esModule?r:{default:r};e.ColorStop=class{constructor(t,e){this.offset=t,this.color=e}};e.ColorStops=class extends o.default{constructor(t){super(t)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(13);e.default=class{constructor(){this.refreshSize=(()=>{this.canvas.setAttribute("width",this.getWidth()),this.canvas.setAttribute("height",this.getHeight()-3)}),this.getWidth=(()=>this.container.getBoundingClientRect().width),this.getHeight=(()=>this.container.getBoundingClientRect().height),this.drawLine=((t,e)=>this.drawLines(new r.Points([t,e]))),this.drawLines=(t=>{this.context.beginPath(),this._buildPath(t),this.context.stroke()}),this.drawPolygon=(t=>{this.context.beginPath(),this._buildPath(t),this.context.closePath(),this.context.fill()}),this.setLineStyle=(t=>{this.context.lineWidth=t.lineWidth,this.context.lineCap=t.lineCap,this.context.lineJoin=t.lineJoin,this.context.miterLimit=t.miterLimit}),this.setStrokeStyle=(t=>this.context.strokeStyle=t),this.setFillStyle=(t=>this.context.fillStyle=t),this.setLinearGradientStyle=((t,e,n)=>{const r=this.context.createLinearGradient(t.x,t.y,e.x,e.y);n.forEach(t=>r.addColorStop(t.offset,t.color)),this.setFillStyle(r)}),this._buildPath=(t=>{this._moveTo(t.first()),t.rest().forEach(t=>{this._lineTo(t)})}),this._moveTo=(t=>this.context.moveTo(t.x,t.y)),this._lineTo=(t=>this.context.lineTo(t.x,t.y)),this.container=document.querySelector("html"),this.canvas=document.querySelector(".canvas-container canvas"),this.context=this.canvas.getContext("2d"),this.refreshSize()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StockRecords=e.StockRecord=void 0;var r,i=n(9),o=(r=i)&&r.__esModule?r:{default:r};e.StockRecord=class{constructor([t,e,n,r,i,o,s]){this.date=new Date(t),this.open=Number.parseFloat(e),this.high=Number.parseFloat(n),this.low=Number.parseFloat(r),this.close=Number.parseFloat(i),this.adjClose=Number.parseFloat(o),this.volume=Number.parseFloat(s)}};class s extends o.default{constructor(t){super(t),this.filterValidValues=(()=>new s(this.array.filter(t=>!isNaN(t.adjClose)))),this.getAdjCloses=(()=>this.array.map(t=>t.adjClose)),this.getDates=(()=>this.array.map(t=>t.date)),this.getStartDate=(()=>new Date(Math.min(...this.getDates()))),this.getEndDate=(()=>new Date(Math.max(...this.getDates()))),this.getMaxAdjClose=(()=>Math.max(...this.getAdjCloses())),this.getMinAdjClose=(()=>Math.min(...this.getAdjCloses()))}}e.StockRecords=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(21),o=n(20),s=(r=o)&&r.__esModule?r:{default:r},a=n(13),u=n(19);e.default=class{constructor(t){this.drawChart=(()=>{const t=(this.canvas.getWidth()-1)/(this.stockRecords.size()-1),e=new a.Points(this.stockRecords.map((e,n)=>new a.Point(n*t,this._lerpValue(e.adjClose)))).concat([new a.Point(this.canvas.getWidth(),this.canvas.getHeight()),new a.Point(0,this.canvas.getHeight()),new a.Point(0,this._lerpValue(this.stockRecords.array[0].adjClose))]),n=e.getMinYPoint(),r=new a.Point(n.x,this.canvas.getHeight()),i=new u.ColorStops([new u.ColorStop(0,"#00FF99A0"),new u.ColorStop(1,"#00BBFFA0")]);this.canvas.setLinearGradientStyle(n,r,i),this.canvas.drawPolygon(e)}),this.refreshSize=(()=>this.canvas.refreshSize()),this._lerp=((t,e,n,r,i)=>e+(r-e)*(i-t)/(n-t)),this._lerpValue=(t=>this._lerp(this.stockRecords.getMinAdjClose(),this.canvas.getHeight(),this.stockRecords.getMaxAdjClose(),0,t)),this.stockRecords=new i.StockRecords(t.slice(1).map(t=>new i.StockRecord(t))).filterValidValues(),this.canvas=new s.default,this._debugPring()}_debugPring(){console.log(this.stockRecords),console.log(this.stockRecords.size()),console.log(this.stockRecords.getAdjCloses()),console.log(`Value Range: ${this.stockRecords.getMinAdjClose()} - ${this.stockRecords.getMaxAdjClose()}`),console.log(`Date Range: ${this.stockRecords.getStartDate()} - ${this.stockRecords.getEndDate()}`),console.log(`width: ${this.canvas.getWidth()}, height: ${this.canvas.getHeight()}`)}}},function(t,e){t.exports="Date,Open,High,Low,Close,Adj Close,Volume\n2017-01-04,19298.679688,19594.160156,19277.929688,19594.160156,19594.160156,163500\n2017-01-05,19602.099609,19615.400391,19473.279297,19520.689453,19520.689453,134500\n2017-01-06,19393.550781,19472.369141,19354.439453,19454.330078,19454.330078,119100\n2017-01-10,19414.830078,19484.900391,19255.349609,19301.439453,19301.439453,119100\n2017-01-11,19358.640625,19402.169922,19325.460938,19364.669922,19364.669922,119100\n2017-01-12,19300.189453,19300.189453,19069.019531,19134.699219,19134.699219,119100\n2017-01-13,19174.970703,19299.359375,19156.929688,19287.279297,19287.279297,119100\n2017-01-16,19219.130859,19255.410156,19061.269531,19095.240234,19095.240234,119100\n2017-01-17,19038.449219,19043.910156,18812.859375,18813.529297,18813.529297,119100\n2017-01-18,18753.960938,18941.240234,18650.330078,18894.369141,18894.369141,119100\n2017-01-19,19082.830078,19122.390625,18982.130859,19072.250000,19072.250000,170600\n2017-01-20,19059.150391,19176.859375,19040.199219,19137.910156,19137.910156,125800\n2017-01-23,18938.449219,19024.210938,18879.679688,18891.029297,18891.029297,124800\n2017-01-24,18817.419922,18915.699219,18783.160156,18787.990234,18787.990234,131500\n2017-01-25,19091.230469,19133.179688,18987.449219,19057.500000,19057.500000,125400\n2017-01-26,19260.669922,19405.230469,19232.460938,19402.390625,19402.390625,145200\n2017-01-27,19453.509766,19486.679688,19404.130859,19467.400391,19467.400391,134600\n2017-01-30,19371.279297,19390.970703,19295.800781,19368.849609,19368.849609,97800\n2017-01-31,19145.349609,19199.750000,19041.339844,19041.339844,19041.339844,133900\n2017-02-01,18926.970703,19155.789063,18916.179688,19148.080078,19148.080078,131500\n2017-02-02,19152.789063,19170.630859,18866.800781,18914.580078,18914.580078,136500\n2017-02-03,18996.740234,19061.259766,18830.890625,18918.199219,18918.199219,140900\n2017-02-06,19069.720703,19075.570313,18899.400391,18976.710938,18976.710938,120500\n2017-02-07,18844.119141,18970.580078,18805.320313,18910.779297,18910.779297,106100\n2017-02-08,18951.160156,19009.240234,18875.570313,19007.599609,19007.599609,102900\n2017-02-09,18942.039063,18991.230469,18874.910156,18907.669922,18907.669922,130500\n2017-02-10,19216.740234,19395.990234,19193.570313,19378.929688,19378.929688,149400\n2017-02-13,19513.779297,19519.439453,19418.179688,19459.150391,19459.150391,117900\n2017-02-14,19478.859375,19501.009766,19232.849609,19238.980469,19238.980469,142800\n2017-02-15,19438.810547,19495.619141,19420.000000,19437.980469,19437.980469,142800\n2017-02-16,19431.609375,19431.609375,19260.240234,19347.529297,19347.529297,137800\n2017-02-17,19228.740234,19275.390625,19173.529297,19234.619141,19234.619141,143600\n2017-02-20,19161.330078,19274.750000,19115.109375,19251.080078,19251.080078,98900\n2017-02-21,19267.869141,19395.349609,19261.980469,19381.439453,19381.439453,100700\n2017-02-22,19419.220703,19419.220703,19329.279297,19379.869141,19379.869141,156700\n2017-02-23,19379.919922,19379.919922,19262.630859,19371.460938,19371.460938,140800\n2017-02-24,19232.109375,19381.099609,19219.580078,19283.539063,19283.539063,148900\n2017-02-27,19130.509766,19178.990234,18995.550781,19107.470703,19107.470703,124200\n2017-02-28,19194.679688,19267.990234,19118.990234,19118.990234,19118.990234,132900\n2017-03-01,19226.939453,19414.550781,19164.619141,19393.539063,19393.539063,132300\n2017-03-02,19624.820313,19668.009766,19564.800781,19564.800781,19564.800781,146200\n2017-03-03,19551.339844,19587.789063,19392.750000,19469.169922,19469.169922,111000\n2017-03-06,19409.179688,19411.539063,19340.320313,19379.140625,19379.140625,88000\n2017-03-07,19337.189453,19375.089844,19317.099609,19344.150391,19344.150391,98800\n2017-03-08,19308.529297,19326.400391,19198.779297,19254.029297,19254.029297,103200\n2017-03-09,19343.060547,19350.199219,19262.980469,19318.580078,19318.580078,101100\n2017-03-10,19444.710938,19623.720703,19427.810547,19604.609375,19604.609375,155300\n2017-03-13,19545.740234,19656.480469,19531.509766,19633.750000,19633.750000,92600\n2017-03-14,19634.289063,19637.550781,19599.619141,19609.500000,19609.500000,123300\n2017-03-15,19528.750000,19581.529297,19503.740234,19577.380859,19577.380859,115700\n2017-03-16,19458.699219,19618.990234,19454.169922,19590.140625,19590.140625,122500\n2017-03-17,19510.890625,19547.509766,19487.919922,19521.589844,19521.589844,137100\n2017-03-21,19510.890625,19547.509766,19337.220703,19455.880859,19455.880859,101700\n2017-03-22,19146.619141,19183.269531,19026.529297,19041.380859,19041.380859,136600\n2017-03-23,19048.839844,19105.109375,18973.750000,19085.310547,19085.310547,121000\n2017-03-24,19066.349609,19296.050781,19060.640625,19262.529297,19262.529297,127700\n2017-03-27,18985.589844,18985.589844,18985.589844,18985.589844,18985.589844,120800\n2017-03-28,19159.070313,19203.640625,19113.439453,19202.869141,19202.869141,122300\n2017-03-29,19216.779297,19251.300781,19164.609375,19217.480469,19217.480469,115100\n2017-03-30,19150.820313,19218.080078,19043.480469,19063.220703,19063.220703,124500\n2017-03-31,19170.419922,19210.919922,18909.259766,18909.259766,18909.259766,149200\n2017-04-03,18988.000000,19068.619141,18920.519531,18983.230469,18983.230469,134200\n2017-04-04,18933.820313,18947.330078,18703.630859,18810.250000,18810.250000,146900\n2017-04-05,18900.699219,18941.939453,18773.939453,18861.269531,18861.269531,121600\n2017-04-06,18754.369141,18797.439453,18532.650391,18597.060547,18597.060547,133600\n2017-04-07,18714.980469,18785.730469,18517.429688,18664.630859,18664.630859,161600\n2017-04-10,18800.220703,18850.800781,18762.699219,18797.880859,18797.880859,111300\n2017-04-11,18717.550781,18767.699219,18661.859375,18747.869141,18747.869141,105100\n2017-04-12,18592.099609,18602.500000,18460.589844,18552.609375,18552.609375,116300\n2017-04-13,18391.720703,18455.250000,18304.720703,18426.839844,18426.839844,123700\n2017-04-14,18531.910156,18531.910156,18285.730469,18335.630859,18335.630859,0\n2017-04-17,18239.839844,18361.439453,18224.679688,18355.259766,18355.259766,0\n2017-04-18,18497.380859,18547.460938,18362.730469,18418.589844,18418.589844,93300\n2017-04-19,18327.330078,18467.730469,18327.330078,18432.199219,18432.199219,120800\n2017-04-20,18446.390625,18523.400391,18420.820313,18430.490234,18430.490234,116900\n2017-04-21,18591.820313,18648.279297,18542.419922,18620.750000,18620.750000,113200\n2017-04-24,18890.380859,18910.330078,18840.130859,18875.880859,18875.880859,98100\n2017-04-25,18872.560547,19109.759766,18867.189453,19079.330078,19079.330078,118000\n2017-04-26,19184.919922,19289.429688,19170.859375,19289.429688,19289.429688,129400\n2017-04-27,19205.589844,19281.699219,19199.589844,19251.869141,19251.869141,116700\n2017-04-28,19240.650391,19264.570313,19164.679688,19196.740234,19196.740234,117800\n2017-05-01,19154.029297,19311.210938,19144.619141,19310.519531,19310.519531,106500\n2017-05-02,19335.720703,19464.300781,19335.019531,19445.699219,19445.699219,112700\n2017-05-08,19709.009766,19929.480469,19705.130859,19895.699219,19895.699219,148700\n2017-05-09,19915.640625,19917.449219,19838.710938,19843.000000,19843.000000,123500\n2017-05-10,19890.560547,19938.529297,19866.300781,19900.089844,19900.089844,129000\n2017-05-11,19943.949219,19989.939453,19906.349609,19961.550781,19961.550781,136400\n2017-05-12,19941.640625,19941.640625,19809.910156,19883.900391,19883.900391,136800\n2017-05-15,19753.460938,19869.849609,19740.630859,19869.849609,19869.849609,128300\n2017-05-16,19953.060547,19998.490234,19862.410156,19919.820313,19919.820313,131100\n2017-05-17,19806.779297,19842.779297,19764.630859,19814.880859,19814.880859,118100\n2017-05-18,19556.990234,19601.529297,19449.730469,19553.859375,19553.859375,135700\n2017-05-19,19591.410156,19628.640625,19497.289063,19590.759766,19590.759766,115600\n2017-05-22,19670.480469,19722.929688,19618.730469,19678.279297,19678.279297,78500\n2017-05-23,19647.740234,19693.019531,19585.539063,19613.279297,19613.279297,83400\n2017-05-24,19777.560547,19782.810547,19690.099609,19742.980469,19742.980469,101300\n2017-05-25,19737.210938,19850.929688,19720.119141,19813.130859,19813.130859,95100\n2017-05-26,19798.490234,19801.589844,19686.490234,19686.839844,19686.839844,84500\n2017-05-29,19697.179688,19736.619141,19627.189453,19682.570313,19682.570313,67300\n2017-05-30,19681.109375,19691.439453,19570.130859,19677.849609,19677.849609,72600\n2017-05-31,19630.330078,19673.509766,19589.250000,19650.570313,19650.570313,125100\n2017-06-01,19692.160156,19887.660156,19686.320313,19860.029297,19860.029297,103500\n2017-06-02,19970.230469,20239.810547,19967.000000,20177.279297,20177.279297,150400\n2017-06-05,20135.419922,20224.539063,20104.130859,20170.820313,20170.820313,99100\n2017-06-06,20122.259766,20152.949219,19948.019531,19979.900391,19979.900391,102000\n2017-06-07,19951.679688,20023.240234,19908.070313,19984.619141,19984.619141,99200\n2017-06-08,20048.279297,20061.220703,19896.349609,19909.259766,19909.259766,125300\n2017-06-09,19953.060547,20096.009766,19927.070313,20013.259766,20013.259766,145300\n2017-06-12,19920.769531,19949.070313,19837.640625,19908.580078,19908.580078,112100\n2017-06-13,19859.810547,19929.029297,19850.859375,19898.750000,19898.750000,97200\n2017-06-14,19974.560547,20009.929688,19879.599609,19883.519531,19883.519531,92900\n2017-06-15,19815.539063,19963.359375,19755.339844,19831.820313,19831.820313,107000\n2017-06-16,19931.150391,20015.160156,19884.800781,19943.259766,19943.259766,135300\n2017-06-19,19974.300781,20087.710938,19949.880859,20067.750000,20067.750000,79700\n2017-06-20,20234.119141,20318.109375,20227.289063,20230.410156,20230.410156,99300\n2017-06-21,20192.160156,20215.109375,20117.789063,20138.789063,20138.789063,94900\n2017-06-22,20154.380859,20191.419922,20107.890625,20110.509766,20110.509766,84600\n2017-06-23,20152.580078,20152.580078,20089.539063,20132.669922,20132.669922,80500\n2017-06-26,20132.810547,20196.380859,20119.039063,20153.349609,20153.349609,77000\n2017-06-27,20229.119141,20250.099609,20185.189453,20225.089844,20225.089844,90300\n2017-06-28,20149.199219,20224.300781,20110.490234,20130.410156,20130.410156,115500\n2017-06-29,20260.869141,20266.589844,20197.380859,20220.300781,20220.300781,118800\n2017-06-30,20025.630859,20044.009766,19946.509766,20033.429688,20033.429688,116600\n2017-07-03,20056.320313,20096.140625,20030.609375,20055.800781,20055.800781,83400\n2017-07-04,20192.269531,20197.160156,19971.529297,20032.349609,20032.349609,100300\n2017-07-05,20015.070313,20087.009766,19888.900391,20081.630859,20081.630859,94600\n2017-07-06,20061.679688,20078.880859,19947.630859,19994.060547,19994.060547,92700\n2017-07-07,19856.650391,19979.929688,19856.650391,19929.089844,19929.089844,91900\n2017-07-10,20070.439453,20127.759766,20023.029297,20080.980469,20080.980469,85700\n2017-07-11,20073.859375,20200.880859,20070.669922,20195.480469,20195.480469,77300\n2017-07-12,20137.220703,20153.039063,20061.160156,20098.380859,20098.380859,81400\n2017-07-13,20177.279297,20183.800781,20062.269531,20099.810547,20099.810547,90500\n2017-07-14,20157.919922,20163.669922,20101.710938,20118.859375,20118.859375,83100\n2017-07-17,null,null,null,null,null,null\n2017-07-18,20074.410156,20081.289063,19943.140625,19999.910156,19999.910156,93400\n2017-07-19,19970.779297,20032.460938,19947.259766,20020.859375,20020.859375,81200\n2017-07-20,20046.900391,20157.109375,20032.230469,20144.589844,20144.589844,80800\n2017-07-21,20089.859375,20135.330078,20081.910156,20099.750000,20099.750000,78700\n2017-07-24,19973.669922,20002.539063,19901.880859,19975.669922,19975.669922,81300\n2017-07-25,19979.560547,20036.310547,19941.609375,19955.199219,19955.199219,70100\n2017-07-26,20098.140625,20116.000000,20016.580078,20050.160156,20050.160156,85500\n2017-07-27,20026.580078,20176.390625,20005.199219,20079.640625,20079.640625,89900\n2017-07-28,20048.460938,20056.160156,19926.599609,19959.839844,19959.839844,108500\n2017-07-31,19933.449219,19983.900391,19891.900391,19925.179688,19925.179688,140300\n2017-08-01,19907.080078,20000.460938,19904.720703,19985.789063,19985.789063,110100\n2017-08-02,20057.070313,20113.730469,20022.050781,20080.039063,20080.039063,95600\n2017-08-03,20066.000000,20070.160156,19985.400391,20029.259766,20029.259766,89300\n2017-08-04,19949.789063,19984.509766,19933.589844,19952.330078,19952.330078,76500\n2017-08-07,20059.289063,20085.900391,20037.400391,20055.890625,20055.890625,75300\n2017-08-08,20062.650391,20076.800781,19970.570313,19996.009766,19996.009766,80400\n2017-08-09,19928.960938,19945.279297,19660.220703,19738.710938,19738.710938,104400\n2017-08-10,19792.449219,19829.880859,19685.830078,19729.740234,19729.740234,104200\n2017-08-11,null,null,null,null,null,null\n2017-08-14,19545.580078,19598.410156,19486.480469,19537.099609,19537.099609,108300\n2017-08-15,19689.380859,19824.119141,19656.910156,19753.310547,19753.310547,90300\n2017-08-16,19750.550781,19776.859375,19719.080078,19729.279297,19729.279297,69400\n2017-08-17,19707.750000,19739.039063,19679.369141,19702.630859,19702.630859,71900\n2017-08-18,19471.269531,19543.130859,19433.089844,19470.410156,19470.410156,95700\n2017-08-21,19509.529297,19509.529297,19365.650391,19393.130859,19393.130859,75300\n2017-08-22,19373.109375,19437.250000,19361.949219,19383.839844,19383.839844,70500\n2017-08-23,19547.050781,19561.320313,19408.470703,19434.640625,19434.640625,78500\n2017-08-24,19366.359375,19428.550781,19351.919922,19353.769531,19353.769531,75400\n2017-08-25,19401.119141,19485.970703,19384.369141,19452.609375,19452.609375,70700\n2017-08-28,19502.230469,19535.500000,19420.500000,19449.900391,19449.900391,69500\n2017-08-29,19319.109375,19371.900391,19280.019531,19362.550781,19362.550781,75000\n2017-08-30,19480.980469,19538.230469,19435.099609,19506.539063,19506.539063,91800\n2017-08-31,19591.320313,19687.990234,19583.109375,19646.240234,19646.240234,97900\n2017-09-01,19733.570313,19735.960938,19620.070313,19691.470703,19691.470703,79400\n2017-09-04,19615.960938,19628.400391,19479.400391,19508.250000,19508.250000,71700\n2017-09-05,19533.380859,19542.779297,19354.589844,19385.810547,19385.810547,77600\n2017-09-06,19286.060547,19371.380859,19254.669922,19357.970703,19357.970703,88500\n2017-09-07,19433.439453,19482.720703,19365.750000,19396.519531,19396.519531,81900\n2017-09-08,19297.960938,19357.490234,19239.519531,19274.820313,19274.820313,106600\n2017-09-11,19441.390625,19567.029297,19437.140625,19545.769531,19545.769531,78700\n2017-09-12,19736.140625,19792.060547,19718.800781,19776.619141,19776.619141,89900\n2017-09-13,19873.689453,19888.839844,19845.019531,19865.820313,19865.820313,84500\n2017-09-14,19860.369141,19918.390625,19793.849609,19807.439453,19807.439453,93700\n2017-09-15,19793.800781,19933.400391,19787.650391,19909.500000,19909.500000,111900\n2017-09-18,null,null,null,null,null,null\n2017-09-19,20128.179688,20320.779297,20122.000000,20299.380859,20299.380859,120900\n2017-09-20,20301.330078,20339.369141,20272.820313,20310.460938,20310.460938,100400\n2017-09-21,20456.500000,20481.269531,20332.689453,20347.480469,20347.480469,115900\n2017-09-22,20413.609375,20417.070313,20249.240234,20296.449219,20296.449219,95400\n2017-09-25,20439.429688,20454.289063,20367.029297,20397.580078,20397.580078,82800\n2017-09-26,20349.259766,20385.500000,20303.980469,20330.189453,20330.189453,95000\n2017-09-27,20269.820313,20278.089844,20213.660156,20267.050781,20267.050781,63600\n2017-09-28,20398.630859,20399.869141,20299.679688,20363.109375,20363.109375,84000\n2017-09-29,20315.339844,20370.330078,20285.060547,20356.279297,20356.279297,85100\n2017-10-02,20400.509766,20411.330078,20363.279297,20400.779297,20400.779297,67600\n2017-10-03,20475.250000,20628.380859,20438.169922,20614.070313,20614.070313,72800\n2017-10-04,20660.810547,20689.080078,20592.179688,20626.660156,20626.660156,73500\n2017-10-05,20650.710938,20667.470703,20602.259766,20628.560547,20628.560547,57300\n2017-10-06,20716.849609,20721.150391,20659.150391,20690.710938,20690.710938,75900\n2017-10-09,null,null,null,null,null,null\n2017-10-10,20680.539063,20823.660156,20663.080078,20823.509766,20823.509766,78300\n2017-10-11,20803.710938,20898.410156,20788.119141,20881.269531,20881.269531,80200\n2017-10-12,20958.179688,20994.400391,20917.039063,20954.720703,20954.720703,80400\n2017-10-13,20959.660156,21211.289063,20933.000000,21155.179688,21155.179688,110500\n2017-10-16,21221.269531,21347.070313,21187.929688,21255.560547,21255.560547,102300\n2017-10-17,21352.169922,21393.960938,21230.669922,21336.119141,21336.119141,92400\n2017-10-18,21374.660156,21402.759766,21317.669922,21363.050781,21363.050781,72700\n2017-10-19,21450.039063,21503.849609,21381.519531,21448.519531,21448.519531,84600\n2017-10-20,21390.949219,21489.259766,21363.099609,21457.640625,21457.640625,85700\n2017-10-23,21709.300781,21723.599609,21614.509766,21696.650391,21696.650391,87400\n2017-10-24,21670.000000,21805.169922,21646.519531,21805.169922,21805.169922,88200\n2017-10-25,21900.130859,21921.359375,21648.349609,21707.619141,21707.619141,122000\n2017-10-26,21698.949219,21793.619141,21688.560547,21739.779297,21739.779297,82600\n2017-10-27,21903.269531,22016.500000,21815.720703,22008.449219,22008.449219,120400\n2017-10-30,22047.949219,22086.880859,21921.240234,22011.669922,22011.669922,135600\n2017-10-31,21897.289063,22020.380859,21840.070313,22011.609375,22011.609375,102400\n2017-11-01,22144.919922,22455.919922,22130.029297,22420.080078,22420.080078,112600\n2017-11-02,22512.179688,22540.250000,22400.009766,22539.119141,22539.119141,105700\n2017-11-03,22512.179688,22540.250000,22400.009766,22539.119141,22539.119141,0\n2017-11-06,22612.960938,22644.679688,22435.339844,22548.349609,22548.349609,111900\n2017-11-07,22518.750000,22953.179688,22512.910156,22937.599609,22937.599609,107800\n2017-11-08,22849.910156,22922.800781,22759.070313,22913.820313,22913.820313,100200\n2017-11-09,22989.439453,23382.150391,22522.830078,22868.710938,22868.710938,160400\n2017-11-10,22580.699219,22724.390625,22511.929688,22681.419922,22681.419922,106600\n2017-11-13,22607.560547,22607.919922,22380.990234,22380.990234,22380.990234,80700\n2017-11-14,22342.929688,22532.300781,22323.240234,22380.009766,22380.009766,95900\n2017-11-15,22250.980469,22305.240234,22004.789063,22028.320313,22028.320313,120600\n2017-11-16,21975.230469,22392.130859,21972.339844,22351.119141,22351.119141,96600\n2017-11-17,22603.300781,22757.400391,22319.119141,22396.800781,22396.800781,113700\n2017-11-20,22279.980469,22410.240234,22215.070313,22261.759766,22261.759766,71700\n2017-11-21,22456.789063,22563.250000,22416.480469,22416.480469,22416.480469,76100\n2017-11-22,22601.550781,22677.339844,22513.439453,22523.150391,22523.150391,81100\n2017-11-23,null,null,null,null,null,null\n2017-11-24,22390.140625,22567.199219,22381.009766,22550.849609,22550.849609,64800\n2017-11-27,22657.080078,22659.330078,22423.400391,22495.990234,22495.990234,66600\n2017-11-28,22474.740234,22580.990234,22363.939453,22486.240234,22486.240234,76800\n2017-11-29,22613.960938,22643.929688,22537.119141,22597.199219,22597.199219,90700\n2017-11-30,22601.830078,22748.320313,22502.679688,22724.960938,22724.960938,140700\n2017-12-01,22916.929688,22994.310547,22675.070313,22819.029297,22819.029297,89700\n2017-12-04,22843.529297,22864.330078,22693.990234,22707.160156,22707.160156,68900\n2017-12-05,22595.330078,22682.710938,22522.279297,22622.380859,22622.380859,75900\n2017-12-06,22525.380859,22528.210938,22119.210938,22177.039063,22177.039063,97300\n2017-12-07,22317.150391,22515.240234,22317.150391,22498.029297,22498.029297,79500\n2017-12-08,22627.949219,22819.710938,22625.410156,22811.080078,22811.080078,106900\n2017-12-11,22894.300781,22938.730469,22787.400391,22938.730469,22938.730469,69500\n2017-12-12,22936.410156,22994.330078,22834.890625,22866.169922,22866.169922,86100\n2017-12-13,22879.269531,22879.369141,22697.320313,22758.070313,22758.070313,91400\n2017-12-14,22699.300781,22786.609375,22638.759766,22694.449219,22694.449219,85100\n2017-12-15,22621.359375,22745.089844,22478.320313,22553.220703,22553.220703,99400\n2017-12-18,22770.439453,22927.500000,22735.199219,22901.769531,22901.769531,85200\n2017-12-19,22961.470703,22990.419922,22862.820313,22868.000000,22868.000000,70500\n2017-12-20,22834.929688,22923.500000,22806.730469,22891.720703,22891.720703,92400\n2017-12-21,22852.009766,22894.949219,22728.060547,22866.099609,22866.099609,73000\n2017-12-22,22850.730469,22908.839844,22801.160156,22902.759766,22902.759766,77800\n2017-12-25,22909.410156,22948.830078,22870.189453,22939.179688,22939.179688,43100\n2017-12-26,22922.949219,22950.150391,22877.630859,22892.689453,22892.689453,46400\n2017-12-27,22854.390625,22936.160156,22854.390625,22911.210938,22911.210938,47200\n2017-12-28,22912.050781,22954.449219,22736.429688,22783.980469,22783.980469,50300\n2017-12-29,22831.490234,22881.210938,22753.199219,22764.939453,22764.939453,46500\n"},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e,n){(function(t,r){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(t).replace(i,function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),u=r[n];n<o;u=r[++n])g(u)||!w(u)?s+=" "+u:s+=" "+a(u);return s},e.deprecate=function(n,i){if(v(t.process))return function(){return e.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var o,s={};function a(t,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),h(r,t,r.depth)}function u(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function l(t,e){return t}function h(t,n,r){if(t.customInspect&&n&&x(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=h(t,i,r)),i}var o=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(y(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(g(e))return t.stylize("null","null")}(t,n);if(o)return o;var s=Object.keys(n),a=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),S(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return f(n);if(0===s.length){if(x(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(S(n))return f(n)}var l,w="",E=!1,R=["{","}"];(d(n)&&(E=!0,R=["[","]"]),x(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(w=" "+RegExp.prototype.toString.call(n)),_(n)&&(w=" "+Date.prototype.toUTCString.call(n)),S(n)&&(w=" "+f(n)),0!==s.length||E&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),l=E?function(t,e,n,r,i){for(var o=[],s=0,a=e.length;s<a;++s)A(e,String(s))?o.push(c(t,e,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(c(t,e,n,r,i,!0))}),o}(t,n,r,a,s):s.map(function(e){return c(t,n,r,a,e,E)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(l,w,R)):R[0]+w+R[1]}function f(t){return"["+Error.prototype.toString.call(t)+"]"}function c(t,e,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),A(r,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=g(n)?h(t,u.value,null):h(t,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),v(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function g(t){return null===t}function y(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===E(t)}function w(t){return"object"==typeof t&&null!==t}function _(t){return w(t)&&"[object Date]"===E(t)}function S(t){return w(t)&&("[object Error]"===E(t)||t instanceof Error)}function x(t){return"function"==typeof t}function E(t){return Object.prototype.toString.call(t)}function R(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(o)&&(o=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!s[t])if(new RegExp("\\b"+t+"\\b","i").test(o)){var n=r.pid;s[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else s[t]=function(){};return s[t]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=y,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=_,e.isError=S,e.isFunction=x,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(25);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,n;console.log("%s - %s",(t=new Date,n=[R(t.getHours()),R(t.getMinutes()),R(t.getSeconds())].join(":"),[t.getDate(),T[t.getMonth()],n].join(" ")),e.format.apply(e,arguments))},e.inherits=n(24),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}}).call(this,n(1),n(3))},function(t,e,n){t.exports=n(11).PassThrough},function(t,e,n){t.exports=n(11).Transform},function(t,e,n){t.exports=n(0)},function(t,e,n){t.exports=n(10)},function(t,e,n){"use strict";t.exports=o;var r=n(14),i=n(4);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(2),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,a,u=1,l={},h=!1,f=t.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(t);c=c&&c.setTimeout?c:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){p(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),r=function(e){t.postMessage(s+e,"*")}),c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return l[u]=i,r(u),u++},c.clearImmediate=d}function d(t){delete l[t]}function p(t){if(h)setTimeout(p,0,t);else{var e=l[t];if(e){h=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),h=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(3))},function(t,e,n){(function(t){var r=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new i(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(33),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e){},function(t,e,n){"use strict";var r=n(6).Buffer,i=n(35);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,o=r.allocUnsafe(t>>>0),s=this.head,a=0;s;)e=s.data,n=o,i=a,e.copy(n,i),a+=s.data.length,s=s.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){t.exports=i;var r=n(12).EventEmitter;function i(){r.call(this)}n(2)(i,r),i.Readable=n(11),i.Writable=n(30),i.Duplex=n(29),i.Transform=n(28),i.PassThrough=n(27),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(h(),0===r.listenerCount(this,"error"))throw t}function h(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",u),n.removeListener("error",l),t.removeListener("error",l),n.removeListener("end",h),n.removeListener("close",h),t.removeListener("close",h)}return n.on("error",l),t.on("error",l),n.on("end",h),n.on("close",h),t.on("close",h),t.emit("pipe",n),t}},function(t,e,n){(function(e,r){var i,o,s,a,u;a=n(38),u=n(26),o=n(7).StringDecoder,t.exports=function(){var t,n,o,a,u,l,h;if(3===arguments.length){if(a=arguments[0],l=arguments[1],"function"!=typeof(t=arguments[2]))throw Error(`Invalid callback argument: ${JSON.stringify(t)}`);if("string"!=typeof a&&!e.isBuffer(arguments[0]))return t(Error(`Invalid data argument: ${JSON.stringify(a)}`))}else if(2===arguments.length){if("string"==typeof arguments[0]||e.isBuffer(arguments[0])?a=arguments[0]:s(arguments[0])?l=arguments[0]:u=`Invalid first argument: ${JSON.stringify(arguments[0])}`,"function"==typeof arguments[1]?t=arguments[1]:s(arguments[1])?l?u="Invalid arguments: got options twice as first and second arguments":l=arguments[1]:u=`Invalid first argument: ${JSON.stringify(arguments[1])}`,u){if(t)return t(Error(u));throw Error(u)}}else 1===arguments.length&&("function"==typeof arguments[0]?t=arguments[0]:l=arguments[0]);return null==l&&(l={}),h=new i(l),null!=a&&r.nextTick(function(){return h.write(a),h.end()}),t&&(n=!1,o=l.objname?{}:[],h.on("readable",function(){var t,e;for(e=[];t=h.read();)l.objname?e.push(o[t[0]]=t[1]):e.push(o.push(t));return e}),h.on("error",function(e){return n=!0,t(e)}),h.on("end",function(){if(!n)return t(null,o)})),h},i=function(t={}){var e,n,r,i,s,u,l,h,f,c,d,p,g,y,m,v,b,w,_;for(w in this.options={},t)_=t[w],this.options[w]=_;return this.options.objectMode=!0,a.Transform.call(this,this.options),null==(e=this.options).rowDelimiter&&(e.rowDelimiter=null),"string"==typeof this.options.rowDelimiter&&(this.options.rowDelimiter=[this.options.rowDelimiter]),null==(n=this.options).delimiter&&(n.delimiter=","),void 0===this.options.quote||this.options.quote||(this.options.quote=""),null==(c=this.options).quote&&(c.quote='"'),null==(d=this.options).escape&&(d.escape='"'),null==(p=this.options).columns&&(p.columns=null),null==(g=this.options).comment&&(g.comment=""),null==(y=this.options).objname&&(y.objname=!1),null==(m=this.options).trim&&(m.trim=!1),null==(v=this.options).ltrim&&(v.ltrim=!1),null==(b=this.options).rtrim&&(b.rtrim=!1),null==(r=this.options).auto_parse&&(r.auto_parse=!1),null==(i=this.options).auto_parse_date&&(i.auto_parse_date=!1),!0===this.options.auto_parse_date&&(this.options.auto_parse_date=function(t){var e;return e=Date.parse(t),isNaN(e)||(t=new Date(e)),t}),null==(s=this.options).relax&&(s.relax=!1),null==(u=this.options).relax_column_count&&(u.relax_column_count=!1),null==(l=this.options).skip_empty_lines&&(l.skip_empty_lines=!1),null==(h=this.options).max_limit_on_data_read&&(h.max_limit_on_data_read=128e3),null==(f=this.options).skip_lines_with_empty_values&&(f.skip_lines_with_empty_values=!1),this.lines=0,this.count=0,this.skipped_line_count=0,this.empty_line_count=0,this.is_int=/^(\-|\+)?([1-9]+[0-9]*)$/,this.is_float=function(t){return t-parseFloat(t)+1>=0},this._={decoder:new o,quoting:!1,commenting:!1,field:null,nextChar:null,closingQuote:0,line:[],chunks:[],rawBuf:"",buf:"",rowDelimiterLength:this.options.rowDelimiter?Math.max(...this.options.rowDelimiter.map(function(t){return t.length})):void 0},this},u.inherits(i,a.Transform),t.exports.Parser=i,i.prototype._transform=function(t,n,r){var i;return t instanceof e&&(t=this._.decoder.write(t)),(i=this.__write(t,!1))?this.emit("error",i):r()},i.prototype._flush=function(t){var e;return(e=this.__write(this._.decoder.end(),!0))?this.emit("error",e):this._.quoting?void this.emit("error",new Error(`Quoted field not terminated at line ${this.lines+1}`)):this._.line.length>0&&(e=this.__push(this._.line))?t(e):t()},i.prototype.__push=function(t){var e,n,r,i,o,s,a,u,l;if(!this.options.skip_lines_with_empty_values||""!==t.join("").trim())if(l=null,!0!==this.options.columns){if("function"==typeof this.options.columns)return e=function(t,e){try{return[null,t.call(null,e)]}catch(t){return[t]}},[r,n]=e(this.options.columns,t),r||void(this.options.columns=n);if(!this._.line_length&&t.length>0&&(this._.line_length=this.options.columns?this.options.columns.length:t.length),1===t.length&&""===t[0])this.empty_line_count++;else if(t.length!==this._.line_length){if(!this.options.relax_column_count)return null!=this.options.columns?Error(`Number of columns on line ${this.lines} does not match header`):Error(`Number of columns is inconsistent on line ${this.lines}`);this.count++,this.skipped_line_count++}else this.count++;if(null!=this.options.columns){for(u={},o=s=0,a=t.length;s<a;o=++s)i=t[o],!1!==this.options.columns[o]&&(u[this.options.columns[o]]=i);l=this.options.objname?[u[this.options.objname],u]:u}else l=t;if(!(this.count<this.options.from||this.count>this.options.to))return this.options.raw?(this.push({raw:this._.rawBuf,row:l}),this._.rawBuf=""):this.push(l),null}else this.options.columns=t},i.prototype.__write=function(t,e){var n,r,i,o,s,a,u,l,h,f,c,d,p,g,y,m,v,b,w,_,S,x,E,R,T,A,k,C;for(y=(t=>"function"==typeof this.is_int?this.is_int(t):this.is_int.test(t)),g=(t=>"function"==typeof this.is_float?this.is_float(t):this.is_float.test(t)),i=(t=>this.options.auto_parse?"function"==typeof this.options.auto_parse?this.options.auto_parse(t):(y(t)?t=parseInt(t):g(t)?t=parseFloat(t):this.options.auto_parse_date&&(t=this.options.auto_parse_date(t)),t):t),v=this.options.trim||this.options.ltrim,k=this.options.trim||this.options.rtrim,t=this._.buf+t,m=t.length,u=0,0===this.lines&&65279===t.charCodeAt(0)&&u++;u<m&&(e||(T=t.substr(u,m-u),!(!this.options.rowDelimiter&&u+3>m||!this._.commenting&&m-u<this.options.comment.length&&this.options.comment.substr(0,m-u)===T||this.options.rowDelimiter&&m-u<this._.rowDelimiterLength&&this.options.rowDelimiter.some(function(t){return t.substr(0,m-u)===T})||this.options.rowDelimiter&&this._.quoting&&m-u<this.options.quote.length+this._.rowDelimiterLength&&this.options.rowDelimiter.some(t=>(this.options.quote+t).substr(0,m-u)===T)||m-u<=this.options.delimiter.length&&this.options.delimiter.substr(0,m-u)===T||m-u<=this.options.escape.length&&this.options.escape.substr(0,m-u)===T)));)if(o=this._.nextChar?this._.nextChar:t.charAt(u),this._.nextChar=m>u+1?t.charAt(u+1):"",this.options.raw&&(this._.rawBuf+=o),null==this.options.rowDelimiter&&(b=u,A=null,this._.quoting||"\n"!==o&&"\r"!==o?!this._.quoting||o!==this.options.quote||"\n"!==(w=this._.nextChar)&&"\r"!==w||(A=this._.nextChar,b+=2):(A=o,b+=1),A&&("\r"===A&&"\n"===t.charAt(b)&&(A+="\n"),this.options.rowDelimiter=[A],this._.rowDelimiterLength=A.length)),this._.commenting||o!==this.options.escape||(a=this.options.escape===this.options.quote,h=this._.nextChar===this.options.escape,c=this._.nextChar===this.options.quote,a&&null==this._.field&&!this._.quoting||!h&&!c)){if(!this._.commenting&&o===this.options.quote)if(this._.quoting){if(r=this.options.rowDelimiter&&this.options.rowDelimiter.some(function(e){return t.substr(u+1,e.length)===e}),n=t.substr(u+1,this.options.delimiter.length)===this.options.delimiter,f=this._.nextChar===this.options.comment,!this._.nextChar||r||n||f){this._.quoting=!1,this._.closingQuote=this.options.quote.length,u++,e&&u===m&&(this._.line.push(i(this._.field||"")),this._.field=null);continue}if(!this.options.relax)return Error(`Invalid closing quote at line ${this.lines+1}; found ${JSON.stringify(this._.nextChar)} instead of delimiter ${JSON.stringify(this.options.delimiter)}`);this._.quoting=!1,this._.field&&(this._.field=`${this.options.quote}${this._.field}`)}else{if(!this._.field){this._.quoting=!0,u++;continue}if(null!=this._.field&&!this.options.relax)return Error(`Invalid opening quote at line ${this.lines+1}`)}if(((d=this.options.rowDelimiter&&this.options.rowDelimiter.some(function(e){return t.substr(u,e.length)===e}))||e&&u===m-1)&&this.lines++,C=!1,this._.commenting||this._.quoting||!this.options.comment||t.substr(u,this.options.comment.length)!==this.options.comment?this._.commenting&&d&&(C=!0,this._.commenting=!1):this._.commenting=!0,l=t.substr(u,this.options.delimiter.length)===this.options.delimiter,this._.commenting||this._.quoting||!l&&!d)this._.commenting||this._.quoting||" "!==o&&"\t"!==o?this._.commenting?u++:(null==this._.field&&(this._.field=""),this._.field+=o,u++):(null==this._.field&&(this._.field=""),v&&!this._.field||(this._.field+=o),u++);else{if(d&&(p=this.options.rowDelimiter.filter(function(e){return t.substr(u,e.length)===e})[0].length),d&&0===this._.line.length&&null==this._.field&&(C||this.options.skip_empty_lines)){u+=p,this._.nextChar=t.charAt(u);continue}if(k&&(this._.closingQuote||(this._.field=null!=(_=this._.field)?_.trimRight():void 0)),this._.line.push(i(this._.field||"")),this._.closingQuote=0,this._.field=null,l&&(u+=this.options.delimiter.length,this._.nextChar=t.charAt(u),e&&!this._.nextChar&&(d=!0,this._.line.push(""))),d){if(s=this.__push(this._.line))return s;this._.line=[],u+=p,this._.nextChar=t.charAt(u);continue}}if(!this._.commenting&&(null!=(S=this._.field)?S.length:void 0)>this.options.max_limit_on_data_read)return Error(`Field exceeds max_limit_on_data_read setting (${this.options.max_limit_on_data_read}) ${JSON.stringify(this.options.delimiter)}`);if(!this._.commenting&&(null!=(x=this._.line)?x.length:void 0)>this.options.max_limit_on_data_read)return Error(`Row delimiter not found in the file ${JSON.stringify(this.options.rowDelimiter)}`)}else u++,o=this._.nextChar,this._.nextChar=t.charAt(u+1),null==this._.field&&(this._.field=""),this._.field+=o,this.options.raw&&(this._.rawBuf+=o),u++;if(e){if(null!=this._.field&&(k&&(this._.closingQuote||(this._.field=null!=(E=this._.field)?E.trimRight():void 0)),this._.line.push(i(this._.field||"")),this._.field=null),(null!=(R=this._.field)?R.length:void 0)>this.options.max_limit_on_data_read)return Error(`Delimiter not found in the file ${JSON.stringify(this.options.delimiter)}`);if(0===m&&this.lines++,this._.line.length>this.options.max_limit_on_data_read)return Error(`Row delimiter not found in the file ${JSON.stringify(this.options.rowDelimiter)}`)}return this._.buf=t.substr(u),null},s=function(t){var e;return e=t,"object"==typeof t&&null!==t&&!Array.isArray(t)&&function(){for(;null!==Object.getPrototypeOf(e=Object.getPrototypeOf(e)););return Object.getPrototypeOf(t===e)}()}}).call(this,n(8).Buffer,n(3))},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,h=-7,f=n?i-1:0,c=n?-1:1,d=t[e+f];for(f+=c,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+t[e+f],f+=c,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=c,h-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=l}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,l=8*o-i-1,h=(1<<l)-1,f=h>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?c/u:c*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[n+d]=255&s,d+=p,s/=256,l-=8);t[n+d-p]|=128*g}},function(t,e,n){"use strict";e.byteLength=function(t){return 3*t.length/4-l(t)},e.toByteArray=function(t){var e,n,r,s,a,u=t.length;s=l(t),a=new o(3*u/4-s),n=s>0?u-4:u;var h=0;for(e=0;e<n;e+=4)r=i[t.charCodeAt(e)]<<18|i[t.charCodeAt(e+1)]<<12|i[t.charCodeAt(e+2)]<<6|i[t.charCodeAt(e+3)],a[h++]=r>>16&255,a[h++]=r>>8&255,a[h++]=255&r;2===s?(r=i[t.charCodeAt(e)]<<2|i[t.charCodeAt(e+1)]>>4,a[h++]=255&r):1===s&&(r=i[t.charCodeAt(e)]<<10|i[t.charCodeAt(e+1)]<<4|i[t.charCodeAt(e+2)]>>2,a[h++]=r>>8&255,a[h++]=255&r);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o="",s=[],a=0,u=n-i;a<u;a+=16383)s.push(h(t,a,a+16383>u?u:a+16383));1===i?(e=t[n-1],o+=r[e>>2],o+=r[e<<4&63],o+="=="):2===i&&(e=(t[n-2]<<8)+t[n-1],o+=r[e>>10],o+=r[e>>4&63],o+=r[e<<2&63],o+="=");return s.push(o),s.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function h(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e,n){(function(e){var r,i;({StringDecoder:r}=n(7)),i=n(39),t.exports=function(t,n={}){var o,s,a;if(a=n.objname?{}:[],t instanceof e&&(t=(new r).write(t)),(s=new i.Parser(n)).push=function(t){return n.objname?a[t[0]]=t[1]:a.push(t)},o=s.__write(t,!1))throw o;if(t instanceof e&&(o=s.__write(t.end(),!0)))throw o;return s._flush(function(){}),a}}).call(this,n(8).Buffer)},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,l=0,h=[],f=n(43);function c(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(v(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(v(r.parts[s],e));o[r.id]={id:r.id,refs:1,parts:a}}}}function d(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function p(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),h.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,i)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function y(t){var e=document.createElement("style");return t.attrs.type="text/css",m(e,t.attrs),p(t,e),e}function m(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var s=l++;n=u||(u=y(e)),r=_.bind(null,n,s,!1),i=_.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",m(e,t.attrs),p(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return c(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}t&&c(d(t,e),e);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete o[a.id]}}}};var b,w=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var s=t[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){(t.exports=n(45)(!1)).push([t.i,"* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n    margin: 0;\n    height: 100%;\n}\n\n.canvas-container {\n    height: 100%;\n    text-align: center;\n}",""])},function(t,e,n){var r=n(46);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(44)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n(47);var r=s(n(42)),i=s(n(23)),o=s(n(22));function s(t){return t&&t.__esModule?t:{default:t}}window.addEventListener("load",t=>{const e=(0,r.default)(i.default),n=new o.default(e);n.drawChart();var s=null;window.addEventListener("resize",t=>{clearTimeout(s),s=setTimeout(()=>{n.refreshSize(),n.drawChart()},200)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,